generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String       @db.String(50)
  displayName String       @unique @db.String(16)
  email       String       @unique @db.String(254)
  password    String       @db.String(60)
  description String?      @db.String(300)
  bookmarks   Bookmark[]
  collections Collection[]
  definitions Definition[]
  examples    Example[]
}

model Definition {
  id          BigInt                   @id @default(autoincrement())
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  name        String                   @db.String(50)
  summary     String                   @db.String(560)
  description String                   @db.String(300)
  definition  String                   @db.String(80)
  userId      String
  source      String?                  @db.String(40)
  user        User                     @relation(fields: [userId], references: [id])
  bookmarks   Bookmark[]
  collections DefinitionOnCollection[]
  examples    Example[]
  definitions SubDefinition[]
}

model Example {
  id           BigInt     @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  definitionId BigInt
  userId       String
  text         String     @db.String(240)
  source       String?    @db.String(60)
  definition   Definition @relation(fields: [definitionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Collection {
  id          BigInt                   @id @default(autoincrement())
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  name        String                   @db.String(80)
  details     String?                  @db.String(460)
  description String?                  @db.String(120)
  userId      String
  user        User                     @relation(fields: [userId], references: [id])
  definitions DefinitionOnCollection[]
}

model DefinitionOnCollection {
  definitionId BigInt
  collectionId BigInt
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id])
  definition   Definition @relation(fields: [definitionId], references: [id])

  @@id([definitionId, collectionId])
}

model Bookmark {
  createdAt     DateTime   @default(now())
  definition_id BigInt
  user_id       String
  definition    Definition @relation(fields: [definition_id], references: [id])
  user          User       @relation(fields: [user_id], references: [id])

  @@id([definition_id, user_id])
}

model SubDefinition {
  id         BigInt     @id @default(autoincrement())
  wordId     BigInt
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  definition String     @db.Char(180)
  example    String?    @db.Char(80)
  word       Definition @relation(fields: [wordId], references: [id])
}
